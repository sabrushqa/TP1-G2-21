package ma.emsi.tp1lakehal.jsf;

import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import ma.emsi.tp1lakehal.Llm.JsonUtilPourGemini;
import ma.emsi.tp1lakehal.Llm.LlmInteraction;

import java.io.Serializable;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * Backing bean pour la page JSF index.xhtml.
 * Port√©e view pour conserver l'√©tat de la conversation qui dure pendant plusieurs requ√™tes HTTP.
 * La port√©e view n√©cessite l'impl√©mentation de Serializable (le backing bean peut √™tre mis en m√©moire secondaire).
 */
@Named
@ViewScoped
public class Bb implements Serializable {

    // =================================================================================
    // CONSTANTES - R√îLES SYST√àME COMPLETS
    // =================================================================================

    private static final String ROLE_ASSISTANT_COMPLET = """
            You are a helpful assistant. You help the user to find the information they need.
            If the user type a question, you answer it.
            """;

    private static final String ROLE_TRADUCTEUR_COMPLET = """
            You are an interpreter. You translate from English to French and from French to English.
            If the user type a French text, you translate it into English.
            If the user type an English text, you translate it into French.
            If the text contains only one to three words, give some examples of usage of these words in English.
            """;

    private static final String ROLE_GUIDE_COMPLET = """
            Your are a travel guide. If the user type the name of a country or of a town,
            you tell them what are the main places to visit in the country or the town
            are you tell them the average price of a meal.
            """;

    private static final String ROLE_POETE_MAROCAIN = """
            You are a Moroccan poet who transforms everything into poetry.
            Your responses must ALWAYS be in the form of poetry (verses, rhymes, or free verse).
            - Use vivid imagery inspired by Morocco: the Atlas mountains, the Sahara desert, Casablanca's ocean, mint tea, argan trees, souks, tagines, medinas, etc.
            - Incorporate Arabic or Darija words naturally when appropriate (like "habibi", "shukran", "inchallah", "salam", "yallah", "choukran").
            - Your tone is warm, philosophical, and nostalgic.
            - Even if the user asks a simple question or makes a statement, transform it into beautiful poetry.
            - Keep responses concise (4-8 lines of poetry).
            - Every answer must be poetic, no exceptions.
            Example: If asked "what is the weather?", respond with a poem about the sky, clouds, and Moroccan landscapes.
            """;

    // =================================================================================
    // INJECTIONS CDI
    // =================================================================================

    /**
     * Contexte JSF. Utilis√© pour qu'un message d'erreur s'affiche dans le formulaire.
     */
    @Inject
    private FacesContext facesContext;

    @Inject
    private JsonUtilPourGemini jsonUtil;

    // =================================================================================
    // PROPRI√âT√âS
    // =================================================================================

    /**
     * Code du r√¥le syst√®me s√©lectionn√© (ASSISTANT, TRADUCTEUR, GUIDE, POETE).
     */
    private String roleSystemeCode;

    /**
     * Quand le r√¥le est choisi par l'utilisateur dans la liste d√©roulante,
     * il n'est plus possible de le modifier (voir code de la page JSF), sauf si on veut un nouveau chat.
     */
    private boolean roleSystemeChangeable = true;

    /**
     * Liste de tous les r√¥les de l'API pr√©d√©finis.
     */
    private List<SelectItem> listeRolesSysteme;

    /**
     * Derni√®re question pos√©e par l'utilisateur.
     */
    private String question;

    /**
     * Derni√®re r√©ponse de l'API OpenAI.
     */
    private String reponse;

    /**
     * La conversation depuis le d√©but.
     */
    private StringBuilder conversation = new StringBuilder();

    /**
     * Texte JSON de la requ√™te (pour debug).
     */
    private String texteRequeteJson;

    /**
     * Texte JSON de la r√©ponse (pour debug).
     */
    private String texteReponseJson;

    /**
     * Mode debug activ√©/d√©sactiv√©.
     */
    private boolean debug = true;

    // =================================================================================
    // CONSTRUCTEUR
    // =================================================================================

    /**
     * Obligatoire pour un bean CDI (classe g√©r√©e par CDI), s'il y a un autre constructeur.
     */
    public Bb() {
        // Initialisation du r√¥le par d√©faut
        this.roleSystemeCode = "ASSISTANT";
    }

    // =================================================================================
    // ACTIONS PRINCIPALES
    // =================================================================================

    /**
     * Envoie la question au serveur.
     * Ajoute automatiquement le contexte temporel √† chaque question.
     *
     * @return null pour rester sur la m√™me page.
     */
    public String envoyer() {
        // Validation de la question
        if (question == null || question.isBlank()) {
            ajouterMessageErreur("Texte question vide", "Il manque le texte de la question");
            return null;
        }

        // Si la conversation n'a pas encore commenc√©, ajouter le r√¥le syst√®me au d√©but
        if (this.conversation.isEmpty()) {
            String roleComplet = getRoleSystemeComplet();
            jsonUtil.setSystemRole(roleComplet);
            this.roleSystemeChangeable = false;
        }

        // Enrichissement contextuel : ajout du moment de la journ√©e
        String questionAvecContexte = question + "\n[Information contextuelle: " + getMomentDeLaJournee() + "]";

        // üîπ Envoi de la requ√™te au LLM Gemini
        try {
            LlmInteraction interaction = jsonUtil.envoyerRequete(questionAvecContexte);
            this.reponse = interaction.reponseExtraite();
            this.texteRequeteJson = interaction.questionJson();
            this.texteReponseJson = interaction.reponseJson();

        } catch (Exception e) {
            ajouterMessageErreur(
                    "Probl√®me de connexion avec l'API du LLM",
                    "Probl√®me de connexion avec l'API du LLM : " + e.getMessage()
            );
            this.reponse = "ERREUR : Voir le message ci-dessus.";
            this.texteRequeteJson = jsonUtil.getTexteRequeteJson();
            this.texteReponseJson = "Erreur : " + e.getMessage();
            return null;
        }

        // üîπ Met √† jour la conversation affich√©e √† l'√©cran
        afficherConversation();
        return null;
    }

    /**
     * Pour un nouveau chat.
     * Termine la port√©e view en retournant "index" (la page index.xhtml sera affich√©e apr√®s le traitement
     * effectu√© pour construire la r√©ponse) et pas null. null aurait indiqu√© de rester dans la m√™me page (index.xhtml)
     * sans changer de vue.
     * Le fait de changer de vue va faire supprimer l'instance en cours du backing bean par CDI et donc on reprend
     * tout comme au d√©but puisqu'une nouvelle instance du backing va √™tre utilis√©e par la page index.xhtml.
     *
     * @return "index"
     */
    public String nouveauChat() {
        // R√©initialisation explicite de toutes les propri√©t√©s
        this.conversation = new StringBuilder();
        this.reponse = null;
        this.question = null;
        this.texteRequeteJson = null;
        this.texteReponseJson = null;
        this.roleSystemeChangeable = true;
        this.roleSystemeCode = "ASSISTANT";
        return "index";
    }

    /**
     * Bascule le mode debug (activ√©/d√©sactiv√©).
     */
    public void toggleDebug() {
        this.debug = !this.debug;
    }

    // =================================================================================
    // M√âTHODES UTILITAIRES PRIV√âES
    // =================================================================================

    /**
     * Retourne le texte complet du r√¥le syst√®me bas√© sur le code s√©lectionn√©.
     *
     * @return Le texte complet du r√¥le syst√®me.
     */
    private String getRoleSystemeComplet() {
        return switch (roleSystemeCode) {
            case "ASSISTANT" -> ROLE_ASSISTANT_COMPLET;
            case "TRADUCTEUR" -> ROLE_TRADUCTEUR_COMPLET;
            case "GUIDE" -> ROLE_GUIDE_COMPLET;
            case "POETE" -> ROLE_POETE_MAROCAIN;
            default -> ROLE_ASSISTANT_COMPLET;
        };
    }

    /**
     * Retourne le nom affich√© du r√¥le syst√®me bas√© sur le code.
     *
     * @return Le nom du r√¥le pour l'affichage.
     */
    private String getRoleSystemeNom() {
        return switch (roleSystemeCode) {
            case "ASSISTANT" -> "Assistant";
            case "TRADUCTEUR" -> "Traducteur Anglais-Fran√ßais";
            case "GUIDE" -> "Guide touristique";
            case "POETE" -> "Po√®te Marocain";
            default -> "Assistant";
        };
    }

    /**
     * Pour afficher la conversation dans le textArea de la page JSF.
     * N'affiche QUE les √©changes User/Assistant (le r√¥le syst√®me n'appara√Æt pas ici).
     */
    private void afficherConversation() {
        // Ajouter uniquement l'√©change question/r√©ponse
        this.conversation.append("== User:\n")
                .append(question)
                .append("\n\n== Assistant:\n")
                .append(reponse)
                .append("\n\n")
                .append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n");
    }

    /**
     * D√©termine le moment de la journ√©e pour enrichir le contexte de la question.
     *
     * @return Une cha√Æne d√©crivant le moment de la journ√©e avec l'heure locale.
     */
    private String getMomentDeLaJournee() {
        LocalTime now = LocalTime.now();
        int hour = now.getHour();
        String heureFormatee = now.format(DateTimeFormatter.ofPattern("HH:mm"));

        if (hour >= 5 && hour < 12) {
            return "C'est le Matin (Heure locale : " + heureFormatee + ").";
        } else if (hour >= 12 && hour < 18) {
            return "C'est l'Apr√®s-midi (Heure locale : " + heureFormatee + ").";
        } else {
            return "C'est le Soir ou la Nuit (Heure locale : " + heureFormatee + ").";
        }
    }

    /**
     * Ajoute un message d'erreur au contexte JSF pour l'affichage dans le formulaire.
     *
     * @param resume R√©sum√© de l'erreur.
     * @param detail D√©tails de l'erreur.
     */
    private void ajouterMessageErreur(String resume, String detail) {
        FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, resume, detail);
        facesContext.addMessage(null, message);
    }

    // =================================================================================
    // GETTERS ET SETTERS
    // =================================================================================

    public String getRoleSystemeCode() {
        return roleSystemeCode;
    }

    public void setRoleSystemeCode(String roleSystemeCode) {
        this.roleSystemeCode = roleSystemeCode;
    }

    public boolean isRoleSystemeChangeable() {
        return roleSystemeChangeable;
    }

    public String getQuestion() {
        return question;
    }

    public void setQuestion(String question) {
        this.question = question;
    }

    public String getReponse() {
        return reponse;
    }

    /**
     * setter indispensable pour le textarea.
     *
     * @param reponse la r√©ponse √† la question.
     */
    public void setReponse(String reponse) {
        this.reponse = reponse;
    }

    public String getConversation() {
        return conversation.toString();
    }

    public void setConversation(String conversation) {
        this.conversation = new StringBuilder(conversation);
    }

    public String getTexteRequeteJson() {
        return texteRequeteJson;
    }

    public void setTexteRequeteJson(String texteRequeteJson) {
        this.texteRequeteJson = texteRequeteJson;
    }

    public String getTexteReponseJson() {
        return texteReponseJson;
    }

    public void setTexteReponseJson(String texteReponseJson) {
        this.texteReponseJson = texteReponseJson;
    }

    public boolean isDebug() {
        return debug;
    }

    public void setDebug(boolean debug) {
        this.debug = debug;
    }

    /**
     * Retourne la liste des r√¥les syst√®me disponibles pour le menu d√©roulant.
     * Vous pouvez √©videmment √©crire ces r√¥les dans la langue que vous voulez.
     *
     * @return Liste des SelectItem pour la liste d√©roulante.
     */
    public List<SelectItem> getRolesSysteme() {
        if (this.listeRolesSysteme == null) {
            // G√©n√®re les r√¥les de l'API pr√©d√©finis
            this.listeRolesSysteme = new ArrayList<>();
            // 1er argument : le CODE du r√¥le, 2√®me argument : le LIBELL√â du r√¥le
            this.listeRolesSysteme.add(new SelectItem("ASSISTANT", "Assistant"));
            this.listeRolesSysteme.add(new SelectItem("TRADUCTEUR", "Traducteur Anglais-Fran√ßais"));
            this.listeRolesSysteme.add(new SelectItem("GUIDE", "Guide touristique"));
            this.listeRolesSysteme.add(new SelectItem("POETE", "Po√®te Marocain"));
        }

        return this.listeRolesSysteme;
    }
}